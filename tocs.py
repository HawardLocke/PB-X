
# protobuf gen csharp

import os
import os.path
import sys
import string
import shutil
import settings

src = '/protos/'
gen_tmp = '/auto_gen/cs/'


def gen_files(src_path, dst_path):
	abs_src_path = os.path.abspath('.') + src_path
	abs_dst_path = os.path.abspath('.') + dst_path
	if os.path.exists(abs_dst_path):
		shutil.rmtree(abs_dst_path)
	os.mkdir(abs_dst_path)
	msg_id_str = '// This file is generated by PBX. You should never modify it.'
	msg_id_str = msg_id_str + '\nnamespace %s\n{\n\tpublic enum MsgID\n\t{\n' % settings.NAME_SPACE_CS
	file_index = 0
	for file_name in os.listdir(abs_src_path):
		print('  %s' % file_name)
		os.system('protoc --csharp_out=.%s .%s%s' % (dst_path, src_path, file_name))
		file_index = file_index + 1
		id_index = file_index * settings.MAX_ID_COUNT_PER_FILE
		msg_id_str = msg_id_str + '\n\t\t// %s\n' % file_name
		f = open(abs_src_path + file_name,'r')
		lines = f.readlines()
		for line in lines:
			find_indx = line.find('message')
			if find_indx != -1:
				id_name = line[find_indx+8 : len(line)-1]
				id_index = id_index + 1
				msg_id_str += '\t\t%s = %d,\n' % (id_name, id_index)
	pass
	msg_id_str += '\n\t}\n}\n'
	open(abs_dst_path+'MsgID.cs', 'wb').write(msg_id_str)
pass


def gen_files_net(src_path, dst_path):
	abs_src_path = os.path.abspath('.') + src_path
	abs_dst_path = os.path.abspath('.') + dst_path
	if os.path.exists(abs_dst_path):
		shutil.rmtree(abs_dst_path)
	os.mkdir(abs_dst_path)
	msg_id_str = '// This file is generated by PBX. You should never modify it.'
	msg_id_str = msg_id_str + '\nnamespace %s\n{\n\tpublic class MsgID\n\t{\n' % settings.NAME_SPACE
	file_index = 0
	for file_name in os.listdir(abs_src_path):
		print('  %s' % file_name)
		os.system("protoc --descriptor_set_out=.%s%s.bin --proto_path=.%s --include_imports .%s%s" % (dst_path, file_name, src_path, src_path, file_name))
		file_name_without_ext = os.path.splitext(file_name)[0]
		os.system("%s/protobuf-net/ProtoGen/protogen -i:.%s%s.bin -o:.%s%s_pb.cs" % (os.path.abspath('.'), dst_path, file_name, dst_path, file_name_without_ext));
		file_index = file_index + 1
		id_index = file_index * settings.MAX_ID_COUNT_PER_FILE
		msg_id_str = msg_id_str + '\n\t\t// %s\n' % file_name
		f = open(abs_src_path + file_name,'r')
		lines = f.readlines()
		for line in lines:
			find_indx = line.find('message')
			if find_indx != -1:
				id_name = line[find_indx+8 : len(line)-1]
				id_index = id_index + 1
				msg_id_str += '\t\tpublic const ushort %s = %d;\n' % (id_name, id_index)
	pass
	msg_id_str += '\n\t}\n}\n'
	open(abs_dst_path+'MsgID.cs', 'wb').write(msg_id_str)
pass


def copy_files(src_path,  dst_path):
	abs_src_path = os.path.abspath('.') + src_path
	abs_dst_path = os.path.abspath('.') + dst_path
	if not os.path.exists(abs_dst_path):
		return
	for file in os.listdir(abs_src_path):
		sourceFile = os.path.join(abs_src_path,  file)
		targetFile = os.path.join(abs_dst_path,  file)
		if os.path.isfile(sourceFile) and sourceFile.find('.cs') > 0:
			open(targetFile, 'wb').write(open(sourceFile, 'rb').read())
			print('  to %s' % targetFile)
pass



print('\n-----Begin Gen CS-----')
if settings.USE_PROTOBUF_NET:
	gen_files_net(src, gen_tmp)
else:
	gen_files(src, gen_tmp)
print('-----End Gen CS-----')
if settings.AUTO_COPY_FILE:
	print('-----Begin Copy-----')
	for path in settings.CS_DEST_DIR:
		abs_dst_path = os.path.abspath('.') + path
		if os.path.exists(abs_dst_path):
			copy_files(gen_tmp, path)
	pass
	abs_src_path = os.path.abspath('.') + gen_tmp
	shutil.rmtree(abs_src_path)
	print('-----End Copy-----\n')
pass


